##
# ULTIMATE HAPROXY CONFIG GUIDE
#
#   the rest you need to know just read full doc
#   http://docs.haproxy.org/2.6/configuration.html#2

##
# we do have 4 main config sections: global, defaults, frontend, backend
#   and 1 extra section: resolvers

##
# {{{ globalzzz
global

    ##
    # log
    #   because we will run haproxy inside docker container we will log everything to stdout 
    #   these are prety much good settings,
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#3.1-log
    log stdout daemon

    ##
    # maxconn
    #   total number of concurrent connection (per-process)
    #   this value should be adjusted based on real usage, haproxy_process_current_connections metric
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#maxconn
    maxconn 2048

    ##
    # hard-stop-after
    #   how long (the maximum) it will wait for "clean soft-stop"
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#hard-stop-after 
    hard-stop-after 30s

    ##
    # stats socket
    #   setting stats socket file
    #   the blow values are pretty solid
    #   docks ~> http://docs.haproxy.org/2.6/configuration.html#3.1-stats%20socket
    stats socket /tmp/haproxy.stats mode 600 user haproxy group haproxy level operator

    ##
    # user haproxy
    # group haproxy
    # daemon
    #   should be set only if NOT running docker
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#user 
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#group
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#daemon

    ##
    # ssl-dh-param-file
    #   this option SHOULD be use, to increase security,
    #   if not specified, default, pre-defined DH params are used
    #   you can generate one with `openssl dhparam -dsaparam -out dhparams.pem 4098` command, see docs for more info
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#ssl-dh-param-file
    ssl-dh-param-file /etc/haproxy/dhparams.pem

    ##
    # ssl-default-bind-options
    #   sets some default options for ssl config on the frontends
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#3.1-ssl-default-bind-options
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

    ##
    # ssl-default-server-options
    #   sets some default options for ssl on the backend side
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#3.1-ssl-default-server-options
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    ##
    # ssl-load-extra-files
    #   do not load any extra files, load only specified in the config
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#ssl-load-extra-files
    ssl-load-extra-files none

    ##
    # ssl-server-verify
    #
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#3.1-ssl-server-verify
    ssl-server-verify required

    ##
    # ssl-skip-self-issued-ca
    #   do not send CA to the client even if it is included in CRT file
    #   it SHOULD NOT! be included, but if for any reason is, we will not send it
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#ssl-skip-self-issued-ca
    ssl-skip-self-issued-ca
# }}}

##
# {{{ defaultzzz
# default options that apply to frontends and backends, one of them or both
# for instance `log` applies to both, but `timeout server` only to backend
#
# list of all options ~> http://docs.haproxy.org/2.6/configuration.html#4.1
defaults all
# yes, 'defaults' can be anonymoys but also they can have names => named one
# haven't tested this, but the documentation stands that some config is possible
# only in named ones, he?, eg:
#   "This directive is only available from named defaults sections, not anonymous
#   ones. Proxies inherit this value from their defaults section." (timeout check)
# hence I always name defaults to something like `all`

    ##
    # log
    #   applies to: frontend and backend
    #   usually we just say it here, that we want to use config from gloabl section
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-log
    log global

    ##
    # log-format, 
    #
    #   applies to: frontend only
    #   all these options allow us to configure format and what to log
    #   by default log output format is very poor, and in most cases we want to
    #   specify something more rich, however before playing with `log-format` option
    #   try out of the box reach options: tcplog, httplog, httpslog
    #
    # log-format - for full custom log output, docs ~> http://docs.haproxy.org/2.6/configuration.html#4-log-format
    # error-log-format - for custom error log output, docs ~> http://docs.haproxy.org/2.6/configuration.html#error-log-format
    # option tcplog - is really nice for pure TCP proxies, enables reach
    #                 TCP logging output, docs ~> http://docs.haproxy.org/2.6/configuration.html#option%20tcplog
    # option httplog - enables reach http log output, docs ~> http://docs.haproxy.org/2.6/configuration.html#option%20httplog
    # option httpslog - enables reach https log output, docs ~> http://docs.haproxy.org/2.6/configuration.html#option%20httpslog
    #
    # log format string docs ~> http://docs.haproxy.org/2.6/configuration.html#8.2
    option httpslog

    ##
    # option log-separate-errors
    #   applies to: frontend only
    #   you pretty much always want this option to be there
    #   increase level of errored connections from "info" to "err", which helps
    #   separating good traffic from the bad one
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#option%20log-separate-errors
    option log-separate-errors

    ##
    # option log-health-checks
    #   applies to: backend only
    #   by default health checks are logged only if the server is changing its state
    #   from DOWN to UP, or UP to DOWN
    #   this option also logs all the checks that lead to the server to go DONW, etc...
    #   i like this option to be enabled
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-option%20log-health-checks
    option log-health-checks

    ##
    # option dontlognull
    #   applies to: frontend only
    #   it will not log if there was no data sent over a connection
    #   usually these are port probing done by monitoring system or another load balancer that stands in front of haproxy
    #   if such lines pollute the logs too much enable this option
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#option%20dontlognull
    # option dontlognull

    ##
    # option dontlog-normal
    #   applies to: frontend only
    #   if we are dealing with a lot of traffic we can consider enabling this option
    #   it causes NORMAL connections to not be logged (5xx are still logged)
    #   however if we are not having any issues with the amount of log lines
    #   please do not set this one
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#option%20dontlog-normal
    # option dontlog-normal

    ##
    # mode
    #   applies to: frontend and backend
    #   mode/protocol the proxy runs, usually we set this to http
    #   and override to tcp if needed in a specific frontend/backend
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-mode
    mode http

    ##
    # timeout client
    #   applies to: frontend only
    #   timeout for inactivity time on the CLIENT side, when a client is expected
    #   to acknowledge or sned data
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4.2-timeout%20client
    timeout client 60s

    ##
    # timeout client-fin
    #   applies to: frontend only
    #   timeout for the client to send FIN/ACK to already closed connection
    #   by default same as `client`, which is way too much
    #   usually we want this to be pretty small, like 1s, for sure much smaller than client
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4.2-timeout%20client-fin
    timeout client-fin 1s

    ##
    # timeout connect
    #   applies to: backend only
    #   how long connection to backend server should take at the maximum
    #   hmmm..i like to set this to 50ms, why? because in normal cases when our haproxy
    #   routes traffic to backend servers in LAN, TCP connection should be taking just
    #   few ms, if that's not the case, lets retry, lets don't wait for TCP retry or anything
    #   like that, especially if we have more than 1 backend server
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4.2-timeout%20connect
    timeout connect 50

    ##
    # timeout server
    #   applies to: backend only
    #   timeout for inactivity time on the SERVER side, when a client is expected
    #   to acknowledge or sned data
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-timeout%20server
    timeout server 60s

    ##
    # timeout server-fin
    #   applies to: backend only
    #   timeout for the SERVER to send FIN/ACK to already closed connection (from haproxy side)
    #   by default same as `server`, which is way too much
    #   usually we want this to be pretty small, like 1s, for sure much smaller than `server`
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#timeout%20server-fin
    timeout server-fin 1s


    ##
    # timeout check 1s
    #   applies to: backend only
    #   simply, backend server health check timeout, I don't see any reason
    #   why setting this for longer than 1s
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-timeout%20check
    timeout check 1s


    ##
    # timeout http-request
    #   applies to: frontend and backend
    #   maximum time for receiving a request by frontend, to be more specific
    #   all the headers (not the data itself, unless "option http-buffer-request" is set)
    #   setting this to low value like 3,5 seconds is usually ok
    #
    #   note, this is different from `client` timeout, because `client` timeout is reset
    #   every time "anything" happen, even a single byte is sent, this `http-request` timeout
    #   refers for a full request
    #
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-timeout%20http-request
    timeout http-request 5s

    ##
    # timeout http-keep-alive
    #   applies to: frontend and backend
    #   maximum allowed time to wait for "another" http request to appear
    #
    #
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-timeout%20http-keep-alive
    timeout http-keep-alive 300s

    ##
    # timeout tunnel
    #   applies to: backend only
    #   when a bidirection connection is established between client and server, for instance WebCocket
    #   this is a timeout for inactive in both directions
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-timeout%20http-request
    timeout tunnel 60s

    ##
    # retries 3
    #   applies to: backend only
    #   number of attempts to connect to backend server
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-retries
    retries 3

    ##
    # retry-on 
    #   applies to: backend only
    #   only valid for http mode
    #   by default haproxy retries if it can not connect to backend server
    #   with this option you can specify other conditions when to do retry
    #   eg: response-timeout, junk-response, 504
    #   it requires allocation a buffer and has memory and perfomace impacts!
    #   documentation discourages using this
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4.2-retry-on

    ##
    # option redispatch
    #   i always set this, it allows picking other backed after first failure
    #   by default only for the LAST retry other backend server is picked
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#option%20redispatch
    option redispatch

    ##
    # option http-keep-alive
    #   applies to: frontend and backend
    #   this is the default, but I like to set it anyway
    #   basically it enables keep-alive mode on the client- and server- sides
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-option%20http-keep-alive
    option http-keep-alive
# }}}

##
# {{{ resolverzzz
##
# resolvers
#   'dns' is just a name here
#   docs ~> http://docs.haproxy.org/2.6/configuration.html#5.3
resolvers dns

    ##
    # nameserver
    #   just a dns server name and address
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#5.3.2-nameserver
    nameserver docker 172.17.0.1:53
    nameserver docker2 172.16.216.1:53
    #nameserver localhost 127.0.0.1:53

    ##
    # accepted_payload_size
    #   this is pretty much standard to set it to 8193
    # docs ~> http://docs.haproxy.org/2.6/configuration.html#5.3.2-accepted_payload_size
    accepted_payload_size 8193

    ##
    # resolve_retries
    #   number of times we will retry a dns lookup
    #   pretty much standard thing, no magic here
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#5.3.2-resolve_retries
    resolve_retries 3

    ##
    # timeout
    #   pretty much standard thing, no magic here
    #   - resolve - timeout for a dns resolution
    #   - retru   - time between two DNS queries, when retrying
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#5.3.2-timeout
    timeout resolve 1s
    timeout retry 1s

    ##
    # hold
    #   aka interval - how often do dns resolution
    #   default value is 10s for "valid", 0s for "obsolete" and 30s for others.
    #   statuses: "nx", "other", "refused", "timeout", "valid", "obsolete"
    #   if we have pretty dynamic environment, set all of them to 1s
    #   if rather static, and not that important (eg, dev env), set to 30s
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#5.3.2-hold
    hold other    1s
    hold refused  1s
    hold nx       1s
    hold timeout  1s
    hold valid    1s
    hold obsolete 1s
# }}}

##
# {{{ frontendzzz

##
# usually we do have 2 "common" frontends: stats and healthz, plus:
#   - single https (and if really needed http)
#   - single tcp(tls) (and if really needed tcp)

# {{{ stats
frontend stats
    ##
    # simply bind 
    bind *:1936

    ##
    # mode http is set in defaults, but..
    mode http 

    ##
    # if we do not want to log requests, probably good to disable it
    option httplog
    option dontlog-normal

    ##
    # stats
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-stats%20enable
    stats enable

    ##
    # use internal prometheus exporter for /metrics
    http-request use-service prometheus-exporter if { path /metrics }

    ##
    # otherwise serve default stats on /
    stats uri /

    ##
    # refresh stats page every 10s
    stats refresh 10s

    ##
    # enable additional information on the stats page
    stats show-legends
# }}}

# {{{ healthz
##
# for probing and monitoring purposes we can enable dedicated frontend
# it is a good practise,
# also what's more we can create some nice rules like if number of backend servers is less than 3, etc...
frontend healthz
    ##
    # if the probing service supports PROXY add `accept-proxy` option to bind keyword
    #   all bind options ~> http://docs.haproxy.org/2.6/configuration.html#5
    bind *:1937

    ##
    #
    monitor-uri /healthz

    ##
    # do not log tcp probing
    # without these options tcp probing would be logged as 400 bad request
    option http-ignore-probes
    option dontlognull

    ##
    # with this option, requests to any path other than /healthz get 403, withou it - 503
    # hence it's up to you what response code you wanna return here
    # /healthz are not affected by this
    http-request deny

    ##
    # example of backend-down fail
    #monitor fail if nbsrv(be-my-awesome-backend) lt 1
    #monitor fail if nbsrv(be-even-more-awesome-backend) lt 1
    # or other syntax with single `monitor fail` statement
    #monitor fail if { nbsrv(be-my-awesome-backend) lt 1 || 
    #monitor fail if nbsrv(be-even-more-awesome-backend) lt 1
    # or using acl
    #acl site_dead nbsrv(dynamic) lt 2
    #acl site_dead nbsrv(static)  lt 2
    #monitor fail if site_dead
# }}}

# {{{ http
##
# http frontend example
frontend http
    
    ##
    # bind
    #   all bind options ~> http://docs.haproxy.org/2.6/configuration.html#5.1
    #   some options important for http
    #       - actually none, for simple plain http, no bind options required for most cases

    bind *:8080

    ##
    #
    mode http
    option httplog

    ##
    # option forwardfor
    #   allows to insert X-Forwarded-For (any any custom name) header set to src client ip
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-option%20forwardfor
    option forwardfor

    ##
    # default_backend
    #   use the specified backend if no `use_backend` rule has been matched
    #   withouth this option ha proxy returns 503 - No server is available to handle this request
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-default_backend
    default_backend <name>

    ##
    # use_backend 
    #   select backend to use based on condition
    #   note, multiple use_backend statements are allowed, and the first that match the condition is used
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-use_backend
    use_backend <name> if|unless <condition>
# }}}

# {{{ https
# bind strict-sni
# }}}

# {{{ tcp
# }}}

# {{{ tcp-tls-passthrough
frontend tcp-tls-passthrough
    bind *:5002
    mode tcp
    option tcplog

    ##
    # TODO: add documentation
    tcp-request inspect-delay 1s

    ##
    # TODO: add documentation
    tcp-request content accept if { req.ssl_hello_type 1 }

    use_backend ... if { req.ssl_sni -i ... }        # -i        = exact match
    use_backend ... if { req.ssl_sni -i -m end ... } # -i -m end = ends with
# }}}

# {{{ tls
# }}}

# }}}

##
# {{{ backendzzz

##
# backend block is relatively much simpler than frontend, usually contains just few lines

##
# http backend example
backend be1-http
    ##
    # balance
    #   balancing algorithm, there are quite a bunch of them, see dosc for full list and description
    #   in most cases `roundrobin` does the job
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-balance
    balance roundrobin

    ##
    # server
    #   all options docs ~> http://docs.haproxy.org/2.6/configuration.html#5.2
    #   options:
    #       dns related:
    #           resolvers <name>         - enable resolving#
    #           init-addr last,libc,none - let haproxy start even it can not resolve the dns name
    #                                      this is pretty useful, because haproxy by default will not start
    #                                      if it can not resolve a server name
    #       checks related (http://docs.haproxy.org/2.6/configuration.html#5.2-check)
    #           check        - this enables health checking, might be good to also set 'option httpchk', as by default checking is just TCP probing
    #           port 8080    - this might be confusing, but this is port for health checks, it is ignored if check is not specified
    #           inter 5s     - health check interval if server is in UP state
    #           fastinter 2s - health check interval if server is in TRANSITIONALLY UP/DOWN state
    #           downinter 1s - health check interval if server is in DOWN state
    #           fall 2       - server will be considered as dead after <count> consecutive unsuccessful health checks
    #           rise 1       - server will be considered as operational after <count> consecutive successful health checks

    ## EXAMPLE ##
    # below is an example of server definition, for plan HTTP origin, that may work just fine for most cases
    # server node01 node01:8080 check port 8081 inter 5s fastinter 2s downinter 1s fall 2 rise 1 resolvers dns resolve-prefer ipv4 init-addr last,libc,none

    ##
    # server-template 
    #   use this to create dynamically list of servers, pretty common approach
    #   the syntax is pretty much the same as server, with extra argument - number of servers to create
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-server-template
    # server-template node_prefix 10 node_fqdn:8080 ...

    ##
    # if healthchecking is enabled by specifying `check` argument to `server`
    # this allows to be more specific
    #   checks are by default TCP probing,
    #   to enable http checks, use this option
    #   by default it is OPTIONS and HTTP/1.0
    #   remember http1.1 requires host header, to set it use http-check send
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#4-option%20httpchk
    #   docs ~> http://docs.haproxy.org/2.6/configuration.html#http-check%20send
    option httpchk /ping
    #option httpchk GET /ping HTTP/1.1

    ##
    # usually set in defaults section, but if we want to be more specific
    timeout check 1s

##
# http backend example
backend be2-https

    ##
    # see above ^^
    balance roundrobin

    ##
    # see above ^^ for more details
    # in addition to the above http options:
    #   ssl related:
    #       ssl                     - enables SSL outgoing connection (with this option, checks are aslo SSL)
    #       verify required         - verify server cert (against ca specified in ca-file)
    #       verifyhost <hostname>   - in case of NOT using SNI, we can specify a hostname that we expect to be in the SSL cert of the server we are connecting to
    #       ca-file /path/to/ca     - path to ca file, that server cert is checked against
    #                               - it is possible to use the trusted CAs of your system, to do this
    #                                 use "@system-ca" value for ca-file parameter
    #       crt /path/to/client.crt - path to client certificate that will be send to establish connection
    #                                 the file must contain both certificate and the key

    ## EXAMPLE ##
    # below is an example of server definition, for HTTPS origin, with full mTLS config
    # server node01 node01:8080 check port 8081 inter 5s fastinter 2s downinter 1s fall 2 rise 1 resolvers dns init-addr last,libc,none ssl verify required verifyhost ... ca-file ... crt ...

    ##
    # below config options apply as well:
    #
    # server-template ...
    # option httpchk ...
    # timeout check 1s
##
# tcp backend example
backend be3-tcp

###################################################################################
# TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO #
###################################################################################

##
# tls backend example
backend be4-tls

###################################################################################
# TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO #
###################################################################################

# }}}
